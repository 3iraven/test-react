stages:
  - test
  - build
  - docker-build
  - deploy

variables:
  # Docker / Azure Variables
  AZURE_REGISTRY_URL: "myregistry.azurecr.io"
  AZURE_APP_SERVICE_NAME: "myappservice"
  AZURE_RESOURCE_GROUP: "myresourcegroup"
  # General
  IMAGE_NAME: "$AZURE_REGISTRY_URL/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA"

before_script:
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

test:
  stage: test
  script:
    - echo "Running Go tests..."
    - cd backend && go test ./...
    - echo "Running React tests..."
    - cd ../frontend && npm install && npm test
  only:
    - branches

build:
  stage: build
  script:
    - echo "Placeholder for any required build steps not covered by Docker"
  only:
    - branches

docker-build:
  stage: docker-build
  image: docker:19.03
  services:
    - docker:19.03-dind
  script:
    - echo "Building Docker image..."
    - docker build -t $IMAGE_NAME .
    - echo "Logging into Azure Container Registry..."
    - docker login $AZURE_REGISTRY_URL -u $AZURE_REGISTRY_USERNAME -p $AZURE_REGISTRY_PASSWORD
    - echo "Pushing Docker image to Azure Container Registry..."
    - docker push $IMAGE_NAME
  only:
    - master

deploy:
  stage: deploy
  image: mcr.microsoft.com/azure-cli
  script:
    - az login --service-principal -u $AZURE_APP_ID -p $AZURE_PASSWORD --tenant $AZURE_TENANT_ID
    - az acr login --name $AZURE_REGISTRY_NAME
    - az webapp config container set --name $AZURE_APP_SERVICE_NAME --resource-group $AZURE_RESOURCE_GROUP --docker-custom-image-name $IMAGE_NAME --docker-registry-server-url https://$AZURE_REGISTRY_URL
  only:
    - master



docker-build:
  image: docker:cli
  stage: docker-build
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE/asset-tracking-svc:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE/asset-tracking-svc:latest"
        docker push "$CI_REGISTRY_IMAGE/asset-tracking-svc:latest"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile




before_script:
    - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    https://www.programonaut.com/how-to-deploy-azure-container-apps-with-gitlab-ci-cd/
    https://circleci.com/blog/deploy-dockerized-go-app-to-azure/



    #!/bin/bash

# File where the current version is stored
VERSION_FILE="VERSION"
# Default increment if no specific type is found in the commit message
DEFAULT_INCREMENT="patch"

# Read the current version
if [ -f "$VERSION_FILE" ]; then
    CURRENT_VERSION=$(cat "$VERSION_FILE")
else
    echo "Version file does not exist."
    exit 1
fi

# Extract the major, minor, and patch numbers
IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
MAJOR=${version_parts[0]}
MINOR=${version_parts[1]}
PATCH=${version_parts[2]}

# Determine the type of increment based on the commit message
INCREMENT=$DEFAULT_INCREMENT
if git log -1 --pretty=%B | grep -q "BREAKING CHANGE:" ; then
    INCREMENT="major"
elif git log -1 --pretty=%B | grep -q "feat:" ; then
    INCREMENT="minor"
elif git log -1 --pretty=%B | grep -q "fix:" ; then
    INCREMENT="patch"
fi

# Increment the version
case $INCREMENT in
    major)
        MAJOR=$((MAJOR+1))
        MINOR=0
        PATCH=0
        ;;
    minor)
        MINOR=$((MINOR+1))
        PATCH=0
        ;;
    patch)
        PATCH=$((PATCH+1))
        ;;
esac

# Combine the parts into the new version
NEW_VERSION="$MAJOR.$MINOR.$PATCH"

# Output the new version to the VERSION file
echo $NEW_VERSION > "$VERSION_FILE"
echo "Version updated to $NEW_VERSION"

# Optionally, commit the updated version file
git add "$VERSION_FILE"
git commit -m "chore: bump version to $NEW_VERSION"
git push


include:
  - template: Security/SAST.gitlab-ci.yml

stages:
  - test_backend
  - test_frontend
  - build
  - bump_version
  - docker-build
  - test

# Define jobs for test_backend, test_frontend, and build as you already have...

bump_version_job:
  stage: bump_version
  script:
    - chmod +x scripts/version_bump.sh
    - ./scripts/version_bump.sh
  only:
    - main

docker-build:
  image: docker:cli
  stage: docker-build
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE/asset-tracking-svc:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" -f docker/Dockerfile .
    - docker push "$DOCKER_IMAGE_NAME"
    - if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE/asset-tracking-svc:latest";
        docker push "$CI_REGISTRY_IMAGE/asset-tracking-svc:latest";
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - docker/Dockerfile

